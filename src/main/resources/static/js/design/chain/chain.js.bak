/**
 * @author duant
 */
Function.prototype.method=function(name,fn){
	this.prototype[name]=fn;
	return this;
}

(function(){
	function _$(){
		//alert(typeof id);
		 this.elements = [];
		for (var i = 0, len = arguments.length; i < len; ++i) {
			alert(arguments[i]);
			var element = arguments[i];
			if (typeof element ==='string') {
				element = document.getElementById(element);
			}
			this.elements.push(element);
		}
		//return elements;
		//return document.getElementById(id);
	}
	
	_$.prototype={
		each:function(fn){
			for(var i=0,len=this.elements.length;i<len;++i){
				fn.call(this,this.elements[i]);
			}
			return this;
		},
		
		setStyle:function(prop,val){
			this.each(function(el){
				el.style[prop]=val;
			});
			return this;
		},
		
		show:function(){
			var that=this;
			this.each(function(el){
			that.setStyle('display','block');	
			});
			return this;
		},
		
		addEvent:function(type,fn){
			var add=function(el){
				if(window.addEventListener){
					el.addEventListener(type,fn,false);
				}else if(window.attachEvent){
					el.attachEvent('on'+type,fn);
				}
			};
			this.each(function(el){
				add(el);
			});
			return this;
		}
		
	};
	
	
	window.$=function(id){
		return new _$(arguments);
	};
	
})();


window.API2=window.API2||{};
API2.prototype=(function(){
	
	var name="Hello World";
	
	setName:function(newName){
		name=newName;
		return this;
	}
	
	getName:function(callback){
		callback.call(this,name);
		return this;
	}
	
})();



$(window).addEvent('load', function(){
		alert("data");
	});
	
function test(){
//	var value=$('name').value;
	//alert(value);
	
	var o2=new API2();
	o2.getName(console.log);
}

